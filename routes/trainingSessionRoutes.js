const express = require('express');
const router = express.Router();
const authMiddleware = require('../middleware/authMiddleware');
const canAccessResource = require('../middleware/canAccessResource');
const trainingSessionController = require('../controllers/trainingSessionController');

// ğŸ“Œ RÃ©cupÃ©rer toutes les sessions d'un training (propriÃ©taire ou admin)
router.get('/by-training/:training_id', authMiddleware, canAccessResource('trainings', 'user_id', 'training_id'), trainingSessionController.getSessionsByTrainingId);

// ğŸ“Œ RÃ©cupÃ©rer l'entraÃ®nement en cours de l'utilisateur
router.get('/current', authMiddleware, trainingSessionController.getCurrentSession);

// ğŸ“Œ RÃ©cupÃ©rer la session d'entraÃ®nement du jour (terminÃ©e) pour l'utilisateur
router.get('/today/completed', authMiddleware, trainingSessionController.getTodayCompletedSession);

// ğŸ“Œ CrÃ©er une session (doit appartenir Ã  l'utilisateur ou Ãªtre admin)
router.post('/create', authMiddleware, trainingSessionController.createSession);

// ğŸ“Œ Modifier une session (seulement le propriÃ©taire ou un admin)
router.put('/edit/:id', authMiddleware, trainingSessionController.updateSession);

// ğŸ“Œ RÃ©cupÃ©rer une session spÃ©cifique (propriÃ©taire ou admin)
router.get('/:id', authMiddleware, trainingSessionController.getSessionById);

// ğŸ“Œ Supprimer une session (soft delete, propriÃ©taire ou admin)
router.delete('/delete/:id', authMiddleware, trainingSessionController.deleteSession);


module.exports = router;
